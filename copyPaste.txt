<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<div class="container my-4">
    <div class="row">
        <div class="col-12">
            <h3 class="mb-3">
                Catenoid
            </h3>
        </div>

        <div class="col-12">
            <div class="ratio ratio-16x9">
                <iframe src="https://yannick168.github.io/Bachelorarbeit/src/catenoid/catenoid.html" class="w-100 h-100 border-0" allowfullscreen="allowfullscreen"></iframe>
            </div>
        </div>
    </div>
</div>

---------------------------------------------------------------------------------


<!-- Bootstrap einbinden (falls noch nicht geschehen) -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<div class="container my-4">
    <div class="row g-4">
        <!-- Linke Seite: Steuerung (wird oben auf kleinen Screens, links ab md) -->

        <div class="col-12">
            <h3 class="mb-3">
                Catenoid-Helicoid Isometry
            </h3>
        </div>

        <div class="col-12 col-md-4">
            <div class="p-3 bg-white rounded shadow-sm">
                <h5 class="mb-3">
                    α-Steuerung
                </h5>
                <label for="alphaRange" class="form-label">α (Catenoid ↔ Helicoid)</label> <input type="range" id="alphaRange" class="form-range" min="0" max="1.5708" step="0.01" value="0" />
            </div>
        </div>
        <!-- Rechte Seite: iframe für Visualisierung -->

        <div class="col-12 col-md-8 d-flex justify-content-center align-items-center">
            <div class="ratio ratio-16x9" style="width: 100%; max-width: 800px;">
                <iframe id="surfaceFrame" class="w-100 h-100 border-0" allowfullscreen="allowfullscreen" name="surfaceFrame"></iframe>
            </div>
        </div>
    </div>
</div>
<!-- Kommunikation Slider → iframe -->
<script>
/* <![CDATA[ */
  const iframe = document.getElementById('surfaceFrame');
  const slider = document.getElementById('alphaRange');

  // Cache umgehen – mit Zeitstempel-Parameter
  iframe.src = "https://yannick168.github.io/Bachelorarbeit/src/catenoidHelicoid/catenoidHelicoid.html?v=" + Date.now();

  slider.addEventListener('input', () => {
    const alpha = parseFloat(slider.value);
    iframe?.contentWindow?.postMessage({ type: 'alpha', alpha }, '*');
  });
/*]]>*/
</script>

---------------------------------------------------------------------------------


<div class="container my-4">
    <div class="row">
        <div class="col-12">
            <h3 class="mb-3">
                Cycloid
            </h3>
        </div>
        $$ x_p(\theta) = (\theta + sin(\theta))R $$ $$ y_p(\theta) = (1 + sin(\theta))R $$
        <div class="col-12 col-md-4 mb-4">
            <div class="p-3 bg-white rounded shadow-sm">
                <div class="mb-3">
                    <label for="cycloidDistanceInput" class="form-label">Abstand zum Mittelpunkt</label> <input type="number" id="cycloidDistanceInput" class="form-control" value="1" min="0" step=
                    "0.01" />
                </div>

                <div class="mb-3">
                    <label for="cycloidAngleSlider" class="form-label">Punktwinkel θ (in Grad)</label>
                    <div class="row gx-2 align-items-center">
                        <div class="col">
                            <input type="range" id="cycloidAngleSlider" class="form-range" min="0" max="360" step="1" value="0" />
                        </div>

                        <div class="col-auto" style="width: 5rem;">
                            <input type="number" id="cycloidThetaInput" class="form-control" min="0" max="360" step="1" value="0" />
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="cycloidSlider" class="form-label">Position t [0, 4π]</label>
                    <div class="row gx-2 align-items-center">
                        <div class="col">
                            <input type="range" id="cycloidSlider" class="form-range" min="0" max="12.56" step="0.01" value="0" />
                        </div>

                        <div class="col-auto" style="width: 6rem;">
                            <input type="number" id="cycloidTInput" class="form-control" min="0" max="12.56" step="0.01" value="0" />
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-12 col-md-8 d-flex justify-content-center align-items-center">
            <div class="ratio ratio-16x9" style="max-width: 700px; width: 100%;">
                <iframe id="cycloidFrame" class="w-100 h-100 border-0" allowfullscreen="allowfullscreen" name="cycloidFrame"></iframe>
            </div>
        </div>
    </div>
</div>
<script>
/* <![CDATA[ */
  const cycloidIframe = document.getElementById('cycloidFrame');
  cycloidIframe.src = "https://yannick168.github.io/Bachelorarbeit/src/cycloid/cycloid.html?v=" + Date.now();

  function sendCycloidUpdate() {
    const t = parseFloat(document.getElementById('cycloidTInput').value);
    const theta = parseFloat(document.getElementById('cycloidThetaInput').value);
    const distance = parseFloat(document.getElementById('cycloidDistanceInput').value);

    if (cycloidIframe && !isNaN(t) && !isNaN(theta) && !isNaN(distance)) {
      cycloidIframe.contentWindow.postMessage({ type: 'update', t, theta, distance }, '*');
    }
  }

  function syncCycloidSlider(sliderId, inputId) {
    const slider = document.getElementById(sliderId);
    const input = document.getElementById(inputId);

    slider.addEventListener('input', () => {
      input.value = slider.value;
      sendCycloidUpdate();
    });

    input.addEventListener('input', () => {
      slider.value = input.value;
      sendCycloidUpdate();
    });
  }

  syncCycloidSlider('cycloidSlider', 'cycloidTInput');
  syncCycloidSlider('cycloidAngleSlider', 'cycloidThetaInput');
  document.getElementById('cycloidDistanceInput').addEventListener('input', sendCycloidUpdate);
/*]]>*/
</script>

---------------------------------------------------------------------------------

<div class="container my-4">
    <div class="row">
        <div class="col-12 col-md-4 mb-4">
            <div class="col-12">
                <h3 class="mb-3">
                    Epitrochoid
                </h3>
            </div>
            $${\displaystyle {\begin{aligned}&amp;x(\theta )=(R+r)\cos \theta -d\cos \left({R+r \over r}\theta \right)\\&amp;y(\theta )=(R+r)\sin \theta -d\sin \left({R+r \over r}\theta
            \right)\end{aligned}}}$$
            <div class="p-3 bg-white rounded shadow-sm">
                <div class="mb-3">
                    <label for="epitrochoidInputR" class="form-label">Großer Radius R</label> <input type="number" id="epitrochoidInputR" class="form-control" value="1" min="0.1" step="0.1" />
                </div>

                <div class="mb-3">
                    <label for="epitrochoidInputr" class="form-label">Kleiner Radius r</label> <input type="number" id="epitrochoidInputr" class="form-control" value="1" min="0.1" step="0.1" />
                </div>

                <div class="mb-3">
                    <label for="epitrochoidInputd" class="form-label">Abstand d</label> <input type="number" id="epitrochoidInputd" class="form-control" value="1" min="0.1" step="0.1" />
                </div>

                <div class="mb-3">
                    <label for="epitrochoidSlider" class="form-label">Position t [0, 6π]</label>
                    <div class="row gx-2 align-items-center">
                        <div class="col">
                            <input type="range" id="epitrochoidSlider" class="form-range" min="0" max="18.85" step="0.01" value="0" />
                        </div>

                        <div class="col-auto" style="width: 6rem;">
                            <input type="number" id="epitrochoidTInput" class="form-control" min="0" max="18.85" step="0.01" value="0" />
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-12 col-md-8 d-flex justify-content-center align-items-center">
            <div class="ratio ratio-16x9" style="max-width: 900px; width: 100%;">
                <iframe id="epitrochoidFrame" class="w-100 h-100 border-0" allowfullscreen="allowfullscreen" name="epitrochoidFrame"></iframe>
            </div>
        </div>
    </div>
</div>
<script>
/* <![CDATA[ */
  const epitrochoidFrame = document.getElementById('epitrochoidFrame');
  epitrochoidFrame.src = "https://yannick168.github.io/Bachelorarbeit/src/epitrochoid/epitrochoid.html?v=" + Date.now();

  function sendEpitrochoidUpdate() {
    const t = parseFloat(document.getElementById('epitrochoidTInput').value);
    const R = parseFloat(document.getElementById('epitrochoidInputR').value);
    const r = parseFloat(document.getElementById('epitrochoidInputr').value);
    const d = parseFloat(document.getElementById('epitrochoidInputd').value);

    if (!isNaN(t) && !isNaN(R) && !isNaN(r) && !isNaN(d)) {
      epitrochoidFrame.contentWindow?.postMessage({ type: 'updateEpitrochoid', t, R, r, d }, '*');
    }
  }

  function syncEpitrochoidSlider(sliderId, inputId) {
    const slider = document.getElementById(sliderId);
    const input = document.getElementById(inputId);

    slider.addEventListener('input', () => {
      input.value = slider.value;
      sendEpitrochoidUpdate();
    });

    input.addEventListener('input', () => {
      slider.value = input.value;
      sendEpitrochoidUpdate();
    });
  }

  syncEpitrochoidSlider('epitrochoidSlider', 'epitrochoidTInput');
  document.getElementById('epitrochoidInputR').addEventListener('input', sendEpitrochoidUpdate);
  document.getElementById('epitrochoidInputr').addEventListener('input', sendEpitrochoidUpdate);
  document.getElementById('epitrochoidInputd').addEventListener('input', sendEpitrochoidUpdate);
/*]]>*/
</script>

---------------------------------------------------------------------------------

<div class="container my-4">
    <div class="row">
        <div class="col-12 col-md-4 mb-4">
            <div class="col-12">
                <h3 class="mb-3">
                    Hypotrochoid
                </h3>
            </div>
            $${\displaystyle {\begin{aligned}&amp;x(\theta )=(R-r)\cos \theta +d\cos \left({R-r \over r}\theta \right)\\&amp;y(\theta )=(R-r)\sin \theta -d\sin \left({R-r \over r}\theta
            \right)\end{aligned}}}$$
            <div class="p-3 bg-white rounded shadow-sm">
                <div class="mb-3">
                    <label for="hypotrochoidInputR" class="form-label">Großer Radius R</label> <input type="number" id="hypotrochoidInputR" class="form-control" value="4" min="0.1" step="0.1" />
                </div>

                <div class="mb-3">
                    <label for="hypotrochoidInputr" class="form-label">Kleiner Radius r</label> <input type="number" id="hypotrochoidInputr" class="form-control" value="1" min="0.1" step="0.1" />
                </div>

                <div class="mb-3">
                    <label for="hypotrochoidInputd" class="form-label">Abstand d</label> <input type="number" id="hypotrochoidInputd" class="form-control" value="1" min="0.1" step="0.1" />
                </div>

                <div class="mb-3">
                    <label for="hypotrochoidSlider" class="form-label">Position t [0, 6π]</label>
                    <div class="row gx-2 align-items-center">
                        <div class="col">
                            <input type="range" id="hypotrochoidSlider" class="form-range" min="0" max="18.85" step="0.01" value="0" />
                        </div>

                        <div class="col-auto" style="width: 6rem;">
                            <input type="number" id="hypotrochoidTInput" class="form-control" min="0" max="18.85" step="0.01" value="0" />
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-12 col-md-8 d-flex justify-content-center align-items-center">
            <div class="ratio ratio-16x9" style="max-width: 900px; width: 100%;">
                <iframe id="hypotrochoidFrame" class="w-100 h-100 border-0" allowfullscreen="allowfullscreen" name="hypotrochoidFrame"></iframe>
            </div>
        </div>
    </div>
</div>
<script>
/* <![CDATA[ */
  const hypotrochoidFrame = document.getElementById('hypotrochoidFrame');
    hypotrochoidFrame.src = "https://yannick168.github.io/Bachelorarbeit/src/hypotrochoid/hypotrochoid.html?v=" + Date.now();

  function sendHypotrochoidUpdate() {
    const t = parseFloat(document.getElementById('hypotrochoidTInput').value);
    const R = parseFloat(document.getElementById('hypotrochoidInputR').value);
    const r = parseFloat(document.getElementById('hypotrochoidInputr').value);
    const d = parseFloat(document.getElementById('hypotrochoidInputd').value);

    if (!isNaN(t) && !isNaN(R) && !isNaN(r) && !isNaN(d)) {
      hypotrochoidFrame.contentWindow?.postMessage({ type: 'updateHypotrochoid', t, R, r, d }, '*');
    }
  }

  function syncHypotrochoidSlider(sliderId, inputId) {
    const slider = document.getElementById(sliderId);
    const input = document.getElementById(inputId);

    slider.addEventListener('input', () => {
      input.value = slider.value;
      sendHypotrochoidUpdate();
    });

    input.addEventListener('input', () => {
      slider.value = input.value;
      sendHypotrochoidUpdate();
    });
  }

  syncHypotrochoidSlider('hypotrochoidSlider', 'hypotrochoidTInput');
  document.getElementById('hypotrochoidInputR').addEventListener('input', sendHypotrochoidUpdate);
  document.getElementById('hypotrochoidInputr').addEventListener('input', sendHypotrochoidUpdate);
  document.getElementById('hypotrochoidInputd').addEventListener('input', sendHypotrochoidUpdate);
/*]]>*/
</script>

---------------------------------------------------------------------------------

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<div class="container my-4">
    <div class="row">
        <div class="col-12">
            <h3 class="mb-3">
                Cubic Surface
            </h3>
        </div>
        <!-- Controls -->

        <div class="col-12">
            <div class="p-3 bg-white rounded shadow-sm mb-3">
                <div class="row g-3 align-items-end">
                    <div class="col-6 col-md-3">
                        <label class="form-label mb-1">View</label> <select id="viewMode" class="form-select form-select-sm">
                            <option value="1">
                                Perspective
                            </option>
                            <option value="2">
                                Orthographic
                            </option>
                            <option value="3">
                                Stereo
                            </option>
                        </select>
                    </div>

                    <div class="col-6 col-md-3">
                        <label class="form-label mb-1">Surface</label> <select id="surfaceMode" class="form-select form-select-sm">
                            <option value="1">
                                Benutzerdefiniert
                            </option>
                            <option value="2">
                                Clebsch
                            </option>
                        </select>
                    </div>
                </div>
            </div>
            <!-- Slider-Container -->

            <div id="sliderContainer" class="p-3 bg-white rounded shadow-sm mb-3">
            </div>
        </div>
        <!-- Iframe -->

        <div class="col-12">
            <div class="ratio ratio-16x9">
                <iframe id="cubicFrame" class="w-100 h-100 border-0" allowfullscreen="allowfullscreen" name="cubicFrame"></iframe>
            </div>
        </div>
    </div>
</div>
<script>
/* <![CDATA[ */
  const cubicUrl = "https://yannick168.github.io/Bachelorarbeit/src/cubicSurface/cubicSurface.html";

  // Reihenfolge / Layout
  const monomials = [
    "x³","y³","z³",
    "x²y","x²z","y²z","yz²","xy²","xz²","xyz",
    "x²","y²","z²",
    "xz","xy","yz",
    "x","y","z",
    "1"
  ];
  const rows = [
    ["x³","y³","z³"],
    ["x²y","x²z","y²z","yz²","xy²","xz²","xyz"],
    ["x²","y²","z²"],
    ["xz","xy","yz"],
    ["x","y","z"],
    ["1"]
  ];

  // Default: x² + y² + z² - 1 = 0
  const defaults = {
    "x³":0,"y³":0,"z³":0,
    "x²y":0,"x²z":0,"y²z":0,"yz²":0,"xy²":0,"xz²":0,"xyz":0,
    "x²":1,"y²":1,"z²":1,
    "xz":0,"xy":0,"yz":0,
    "x":0,"y":0,"z":0,
    "1":-1
  };

  const inputs = []; // index nach monomials
  const sliders = [];

  // Inline-Styles erzwingen (um Jimdo/Theme zu übersteuern)
  const ROW_STYLE = "display:flex;flex-wrap:nowrap;justify-content:flex-start;gap:6px;margin-bottom:8px;overflow-x:auto;padding-bottom:2px;";
  const CELL_W = 110; // px — bei Bedarf kleiner stellen
  const CELL_STYLE = `flex:0 0 ${CELL_W}px;width:${CELL_W}px;min-width:${CELL_W}px;max-width:${CELL_W}px;display:flex;flex-direction:column;align-items:center;`;
  const LABEL_STYLE = "font-size:12px;font-weight:600;text-align:center;margin-bottom:2px;line-height:1.1;";
  const RANGE_STYLE = "width:100%;height:16px;padding:0;margin:0 0 2px 0;";
  const NUM_STYLE = "width:100%;height:26px;font-size:13px;text-align:center;padding:2px;";

  function createSlider(mono){
    const base = Number(defaults[mono] ?? 0);

    const wrap = document.createElement("div");
    wrap.setAttribute("style", CELL_STYLE);

    const lab = document.createElement("div");
    lab.setAttribute("style", LABEL_STYLE);
    lab.textContent = mono;

    const rng = document.createElement("input");
    rng.type = "range";
    rng.className = "form-range";
    rng.setAttribute("style", RANGE_STYLE);
    rng.step = "0.1";
    rng.min = (base - 5).toString();
    rng.max = (base + 5).toString();
    rng.value = String(base);

    const num = document.createElement("input");
    num.type = "number";
    num.className = "form-control form-control-sm";
    num.setAttribute("style", NUM_STYLE);
    num.step = "0.1";
    num.value = String(base);

    rng.addEventListener("input", () => { num.value = rng.value; sendAll(); });
    num.addEventListener("input", () => {
      const v = parseFloat(num.value);
      if (isFinite(v)) {
        rng.min = (v - 5).toFixed(1);
        rng.max = (v + 5).toFixed(1);
        rng.value = String(v);
        sendAll();
      }
    });

    wrap.appendChild(lab);
    wrap.appendChild(rng);
    wrap.appendChild(num);

    const idx = monomials.indexOf(mono);
    inputs[idx] = num;
    sliders[idx] = rng;
    return wrap;
  }

  function buildSliders(){
    const container = document.getElementById("sliderContainer");
    container.innerHTML = "";
    rows.forEach(rowList => {
      const row = document.createElement("div");
      row.setAttribute("style", ROW_STYLE);
      rowList.forEach(m => row.appendChild(createSlider(m)));
      container.appendChild(row);
    });
  }

  function currentCoeffs(){
    return monomials.map((_, i) => {
      const v = parseFloat(inputs[i].value);
      return isFinite(v) ? v : 0;
    });
  }

  function sendAll(){
    const frame = document.getElementById("cubicFrame");
    if (!frame || !frame.contentWindow) return;
    const coeffs = currentCoeffs();
    const viewMode = parseInt(document.getElementById("viewMode").value, 10);
    const surfaceMode = parseInt(document.getElementById("surfaceMode").value, 10);
    frame.contentWindow.postMessage({ type: "coeffs", coeffs }, "*");
    frame.contentWindow.postMessage({ type: "controls", viewMode, surfaceMode }, "*");
  }

  // iframe laden + initialisieren
  const frame = document.getElementById("cubicFrame");
  frame.src = cubicUrl + (cubicUrl.includes("?") ? "&" : "?") + "v=" + Date.now();

  buildSliders();
  document.getElementById("viewMode").addEventListener("change", sendAll);
  document.getElementById("surfaceMode").addEventListener("change", sendAll);

  frame.addEventListener("load", () => setTimeout(sendAll, 200));
  window.addEventListener("message", (e) => {
    if (e.data && e.data.type === "ready") sendAll();
  });
/* ]]> */
</script>


----------------------------------------------------------

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<div class="container my-4">
    <div class="row">
        <div class="col-12">
            <h3 class="mb-3">
                Surface Evolver
            </h3>
        </div>

        <div class="col-12">
            <div class="ratio ratio-16x9">
                <iframe src="https://yannick168.github.io/Bachelorarbeit/src/surfaceEvolver/surfaceEvolver.html" class="w-100 h-100 border-0" allowfullscreen="allowfullscreen"></iframe>
            </div>
        </div>
    </div>
</div>