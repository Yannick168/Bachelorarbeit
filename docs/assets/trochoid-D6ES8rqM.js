import"./modulepreload-polyfill-B5Qt9EMX.js";/* empty css              */import{W as b,S as j,O as W,e as d,V as t,h as G,d as P,i as D,j as k,k as q,b as A}from"./three.module-BZpdcylZ.js";import{r as Y}from"./resizeViewport-McQ4z10F.js";const S=document.getElementById("canvas"),g=new b({canvas:S,antialias:!0});g.setPixelRatio(window.devicePixelRatio);g.setClearColor(16777215);const c=new j,n=new W(-10,10,5,-5,.1,100);n.position.set(0,0,10);let i=1;const Z=Math.PI*4,H=.05;let x=1,O=0,l,m,w,h,p,I=!1;function J(){const e=Z+2;Y(g,n,S,e,16/9,!1),n.updateProjectionMatrix()}function v(){I||(J(),I=!0)}function K(e){return new t(i+i*e,i,-.01)}function z(){[l,m,w,h,p].forEach(r=>{r&&c.remove(r)}),v();const e=new d().setFromPoints([new t(n.left,0,0),new t(n.right,0,0)]);p=new G(e,new P({color:0})),c.add(p);const s=new d().setFromPoints([]);l=new G(s,new P({color:255})),c.add(l);const a=[],o=64;for(let r=0;r<=o;r++){const u=r/o*Math.PI*2;a.push(new t(Math.cos(u)*i,Math.sin(u)*i,0))}const y=new d().setFromPoints(a);m=new D(y,new P({color:0})),c.add(m);const F=new k(.1*i,16),f=new q({color:16711680});w=new A(F,f),c.add(w);const L=new d().setFromPoints([new t,new t]);h=new G(L,new P({color:0})),c.add(h),V(0)}function V(e){if(!m||!w||!h||!l)return;const s=O*Math.PI/180,a=K(e);m.position.copy(a),m.rotation.z=-e;const o=-e+s+Math.PI/2,y=new t(Math.cos(o),Math.sin(o),0).multiplyScalar(x);w.position.copy(a.clone().add(y));const F=[a.clone().setZ(0),w.position];h.geometry.setFromPoints(F);const f=[],L=Math.min(0,e),r=Math.max(0,e);for(let M=L;M<=r+1e-9;M+=H){const E=i+i*M,C=-M+s+Math.PI/2,T=new t(Math.cos(C),Math.sin(C),0).multiplyScalar(x);f.push(new t(E,i,0).add(T))}const u=new d().setFromPoints(f);l.geometry.dispose(),l.geometry=u}window.addEventListener("resize",()=>{I=!1,v(),z()});v();z();function B(){requestAnimationFrame(B),g.render(c,n)}B();window.updateTrochoid=(e,s,a,o)=>{typeof o=="number"&&isFinite(o)&&o>0&&(i=o),O=s,x=a,z(),V(e)};S.addEventListener("wheel",e=>{if(e.preventDefault(),e.deltaY<0?n.zoom*=1.1:n.zoom/=1.1,n.updateProjectionMatrix(),p){const s=new d().setFromPoints([new t(n.left,0,0),new t(n.right,0,0)]);p.geometry.dispose(),p.geometry=s}});
